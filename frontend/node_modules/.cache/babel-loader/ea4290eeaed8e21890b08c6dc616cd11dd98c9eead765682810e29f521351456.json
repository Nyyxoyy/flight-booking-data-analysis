{"ast":null,"code":"require('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\nconst routes = require('./routes');\nconst app = express();\n\n// Enhanced CORS configuration\napp.use(cors({\n  origin: process.env.FRONTEND_URL || 'http://localhost:3000',\n  methods: ['GET', 'POST', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n}));\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\n\n// API routes\napp.use('/api', routes);\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.status(200).json({\n    status: 'healthy'\n  });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('Server error:', err);\n  res.status(500).json({\n    error: 'Internal server error'\n  });\n});\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["require","config","express","cors","routes","app","use","origin","process","env","FRONTEND_URL","methods","allowedHeaders","json","urlencoded","extended","get","req","res","status","err","next","console","error","PORT","listen","log"],"sources":["C:/Users/singh/Downloads/flight-booking-analysis-ollama/frontend/src/index.js"],"sourcesContent":["require('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\nconst routes = require('./routes');\n\nconst app = express();\n\n// Enhanced CORS configuration\napp.use(cors({\n  origin: process.env.FRONTEND_URL || 'http://localhost:3000',\n  methods: ['GET', 'POST', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n}));\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// API routes\napp.use('/api', routes);\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.status(200).json({ status: 'healthy' });\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('Server error:', err);\n  res.status(500).json({ error: 'Internal server error' });\n});\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});"],"mappings":"AAAAA,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAC1B,MAAMC,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMI,MAAM,GAAGJ,OAAO,CAAC,UAAU,CAAC;AAElC,MAAMK,GAAG,GAAGH,OAAO,CAAC,CAAC;;AAErB;AACAG,GAAG,CAACC,GAAG,CAACH,IAAI,CAAC;EACXI,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,YAAY,IAAI,uBAAuB;EAC3DC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC;EACnCC,cAAc,EAAE,CAAC,cAAc,EAAE,eAAe;AAClD,CAAC,CAAC,CAAC;AAEHP,GAAG,CAACC,GAAG,CAACJ,OAAO,CAACW,IAAI,CAAC,CAAC,CAAC;AACvBR,GAAG,CAACC,GAAG,CAACJ,OAAO,CAACY,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;;AAE/C;AACAV,GAAG,CAACC,GAAG,CAAC,MAAM,EAAEF,MAAM,CAAC;;AAEvB;AACAC,GAAG,CAACW,GAAG,CAAC,SAAS,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC/BA,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACN,IAAI,CAAC;IAAEM,MAAM,EAAE;EAAU,CAAC,CAAC;AAC7C,CAAC,CAAC;;AAEF;AACAd,GAAG,CAACC,GAAG,CAAC,CAACc,GAAG,EAAEH,GAAG,EAAEC,GAAG,EAAEG,IAAI,KAAK;EAC/BC,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEH,GAAG,CAAC;EACnCF,GAAG,CAACC,MAAM,CAAC,GAAG,CAAC,CAACN,IAAI,CAAC;IAAEU,KAAK,EAAE;EAAwB,CAAC,CAAC;AAC1D,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAGhB,OAAO,CAACC,GAAG,CAACe,IAAI,IAAI,IAAI;AACrCnB,GAAG,CAACoB,MAAM,CAACD,IAAI,EAAE,MAAM;EACrBF,OAAO,CAACI,GAAG,CAAC,0BAA0BF,IAAI,EAAE,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}