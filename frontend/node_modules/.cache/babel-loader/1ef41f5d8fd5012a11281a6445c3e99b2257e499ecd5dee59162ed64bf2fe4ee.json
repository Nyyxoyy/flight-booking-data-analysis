{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\singh\\\\Downloads\\\\flight-booking-analysis-ollama\\\\frontend\\\\src\\\\components\\\\VisualizationRenderer.jsx\";\nimport React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_COLORS = ['#4361ee', '#3a0ca3', '#4cc9f0', '#4895ef', '#f72585', '#7209b7', '#b5179e', '#560bad', '#480ca8', '#3f37c9'];\n// Helper functions\nconst isDateColumn = (data, colName) => {\n  if (!data.length) return false;\n  const sampleValue = data[0][colName];\n  return typeof sampleValue === 'string' && sampleValue.match(/\\d{4}-\\d{2}-\\d{2}/) || sampleValue instanceof Date;\n};\nconst detectChartType = data => {\n  if (!data || !data.length) return null;\n  const columns = Object.keys(data[0]);\n  if (columns.length !== 2) return null;\n\n  // Check for date column first\n  if (isDateColumn(data, columns[0])) return 'line';\n\n  // More flexible bar chart detection\n  const numericValues = data.filter(row => {\n    const val = row[columns[1]];\n    return !isNaN(parseFloat(val));\n  }).length;\n\n  // If most values are numeric, use bar chart\n  if (numericValues / data.length > 0.8) return 'bar';\n\n  // Default to pie\n  return 'pie';\n};\nconst transformDataForChart = (data, chartType) => {\n  if (!data.length) return [];\n  const columns = Object.keys(data[0]);\n  const [labelCol, valueCol] = columns;\n  return data.map(row => {\n    const value = parseFloat(row[valueCol]) || 0;\n    if (chartType === 'line') {\n      return {\n        x: new Date(row[labelCol]).getTime(),\n        y: value,\n        name: new Date(row[labelCol]).toLocaleDateString()\n      };\n    }\n    return {\n      name: row[labelCol],\n      y: value\n    };\n  });\n};\nconst getChartOptions = (chartType, data) => {\n  const baseOptions = {\n    title: {\n      text: 'Query Results Visualization'\n    },\n    accessibility: {\n      enabled: false\n    },\n    credits: {\n      enabled: false\n    },\n    colors: DEFAULT_COLORS // Set default colors for all charts\n  };\n  switch (chartType) {\n    case 'pie':\n      return {\n        ...baseOptions,\n        chart: {\n          type: 'pie'\n        },\n        plotOptions: {\n          pie: {\n            allowPointSelect: true,\n            cursor: 'pointer',\n            dataLabels: {\n              enabled: true,\n              format: '<b>{point.name}</b>: {point.y}'\n            }\n          }\n        },\n        series: [{\n          data\n        }]\n      };\n    case 'bar':\n      return {\n        ...baseOptions,\n        chart: {\n          type: 'column'\n        },\n        xAxis: {\n          type: 'category'\n        },\n        plotOptions: {\n          column: {\n            colorByPoint: true // This makes each bar a different color\n          }\n        },\n        series: [{\n          data,\n          showInLegend: false // Hide legend for single series\n        }]\n      };\n    case 'line':\n      return {\n        ...baseOptions,\n        chart: {\n          type: 'line'\n        },\n        xAxis: {\n          type: 'datetime'\n        },\n        series: [{\n          data\n        }]\n      };\n    default:\n      return baseOptions;\n  }\n};\nexport default function VisualizationRenderer({\n  response\n}) {\n  const {\n    type,\n    data\n  } = response || {};\n  if (type === 'string') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"response-string\",\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this);\n  }\n  if (type === 'table') {\n    if (!Array.isArray(data)) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: \"Invalid table data format\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 14\n      }, this);\n    }\n    const chartType = detectChartType(data);\n    const chartData = chartType ? transformDataForChart(data, chartType) : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [chartType && chartData && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '2rem'\n        },\n        children: /*#__PURE__*/_jsxDEV(HighchartsReact, {\n          highcharts: Highcharts,\n          options: getChartOptions(chartType, chartData)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"response-table\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: data.length > 0 && Object.keys(data[0]).map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: col\n              }, col, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: data.map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.values(row).map((val, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n                children: (val === null || val === void 0 ? void 0 : val.toString()) || 'â€”'\n              }, j, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 21\n              }, this))\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: [\"Unsupported response type: \", type]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 10\n  }, this);\n}\n_c = VisualizationRenderer;\nvar _c;\n$RefreshReg$(_c, \"VisualizationRenderer\");","map":{"version":3,"names":["React","Highcharts","HighchartsReact","jsxDEV","_jsxDEV","DEFAULT_COLORS","isDateColumn","data","colName","length","sampleValue","match","Date","detectChartType","columns","Object","keys","numericValues","filter","row","val","isNaN","parseFloat","transformDataForChart","chartType","labelCol","valueCol","map","value","x","getTime","y","name","toLocaleDateString","getChartOptions","baseOptions","title","text","accessibility","enabled","credits","colors","chart","type","plotOptions","pie","allowPointSelect","cursor","dataLabels","format","series","xAxis","column","colorByPoint","showInLegend","VisualizationRenderer","response","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","chartData","style","marginBottom","highcharts","options","col","i","values","j","toString","_c","$RefreshReg$"],"sources":["C:/Users/singh/Downloads/flight-booking-analysis-ollama/frontend/src/components/VisualizationRenderer.jsx"],"sourcesContent":["import React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nconst DEFAULT_COLORS = [\n  '#4361ee', '#3a0ca3', '#4cc9f0', '#4895ef', '#f72585',\n  '#7209b7', '#b5179e', '#560bad', '#480ca8', '#3f37c9'\n];\n// Helper functions\nconst isDateColumn = (data, colName) => {\n  if (!data.length) return false;\n  const sampleValue = data[0][colName];\n  return (\n    (typeof sampleValue === 'string' && sampleValue.match(/\\d{4}-\\d{2}-\\d{2}/)) ||\n    sampleValue instanceof Date\n  );\n};\n\nconst detectChartType = (data) => {\n  if (!data || !data.length) return null;\n  \n  const columns = Object.keys(data[0]);\n  if (columns.length !== 2) return null;\n\n  // Check for date column first\n  if (isDateColumn(data, columns[0])) return 'line';\n  \n  // More flexible bar chart detection\n  const numericValues = data.filter(row => {\n    const val = row[columns[1]];\n    return !isNaN(parseFloat(val));\n  }).length;\n  \n  // If most values are numeric, use bar chart\n  if (numericValues / data.length > 0.8) return 'bar';\n  \n  // Default to pie\n  return 'pie';\n};\n\nconst transformDataForChart = (data, chartType) => {\n  if (!data.length) return [];\n  \n  const columns = Object.keys(data[0]);\n  const [labelCol, valueCol] = columns;\n\n  return data.map(row => {\n    const value = parseFloat(row[valueCol]) || 0;\n    if (chartType === 'line') {\n      return {\n        x: new Date(row[labelCol]).getTime(),\n        y: value,\n        name: new Date(row[labelCol]).toLocaleDateString()\n      };\n    }\n    return {\n      name: row[labelCol],\n      y: value\n    };\n  });\n};\n\nconst getChartOptions = (chartType, data) => {\n  const baseOptions = {\n    title: { text: 'Query Results Visualization' },\n    accessibility: { enabled: false },\n    credits: { enabled: false },\n    colors: DEFAULT_COLORS // Set default colors for all charts\n  };\n\n  switch (chartType) {\n    case 'pie':\n      return {\n        ...baseOptions,\n        chart: { type: 'pie' },\n        plotOptions: {\n          pie: {\n            allowPointSelect: true,\n            cursor: 'pointer',\n            dataLabels: {\n              enabled: true,\n              format: '<b>{point.name}</b>: {point.y}'\n            }\n          }\n        },\n        series: [{ data }]\n      };\n    case 'bar':\n      return {\n        ...baseOptions,\n        chart: { type: 'column' },\n        xAxis: { type: 'category' },\n        plotOptions: {\n          column: {\n            colorByPoint: true // This makes each bar a different color\n          }\n        },\n        series: [{ \n          data,\n          showInLegend: false // Hide legend for single series\n        }]\n      };\n    case 'line':\n      return {\n        ...baseOptions,\n        chart: { type: 'line' },\n        xAxis: { type: 'datetime' },\n        series: [{ data }]\n      };\n    default:\n      return baseOptions;\n  }\n};\n\nexport default function VisualizationRenderer({ response }) {\n  const { type, data } = response || {};\n\n  if (type === 'string') {\n    return (\n      <div className=\"response-string\">\n        {data}\n      </div>\n    );\n  }\n\n  if (type === 'table') {\n    if (!Array.isArray(data) ){\n      return <div className=\"error\">Invalid table data format</div>;\n    }\n\n    const chartType = detectChartType(data);\n    const chartData = chartType ? transformDataForChart(data, chartType) : null;\n\n    return (\n      <div>\n        {chartType && chartData && (\n          <div style={{ marginBottom: '2rem' }}>\n            <HighchartsReact\n              highcharts={Highcharts}\n              options={getChartOptions(chartType, chartData)}\n            />\n          </div>\n        )}\n\n        <div className=\"response-table\">\n          <table>\n            <thead>\n              <tr>\n                {data.length > 0 && Object.keys(data[0]).map(col => (\n                  <th key={col}>{col}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {data.map((row, i) => (\n                <tr key={i}>\n                  {Object.values(row).map((val, j) => (\n                    <td key={j}>{val?.toString() || 'â€”'}</td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n\n  return <div className=\"error\">Unsupported response type: {type}</div>;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}